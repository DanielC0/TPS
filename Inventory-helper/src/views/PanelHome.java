/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.sql.Connection;
import java.sql.ResultSet;
import java.util.ArrayList;

import dao.AdminDAO;
import dao.ClientDAO;
import objs.Client;
import uistyle.WDefaultTableModel;
import java.awt.Dimension;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Daniel
 */
@SuppressWarnings("serial")
public class PanelHome extends javax.swing.JPanel {

    /**
     * Creates new form panelInicio
     */
    public PanelHome() { 
        initComponents();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelLeft = new javax.swing.JPanel();
        scrollPaneStock = new javax.swing.JScrollPane(); 
        panelCenter = new javax.swing.JPanel();
        panelTitleSales = new javax.swing.JPanel();
        labelSale = new javax.swing.JLabel();
        panelAddProducts = new javax.swing.JPanel();
        labelQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        btnAddSelectedProduct = new javax.swing.JButton();


		WDefaultTableModel modeltb = new WDefaultTableModel(
				new String [] {"id","Nombre","cantidad" ,"Precio unitario",});
        btnAddSelectedProduct.addActionListener(new ActionListener(){
        	public void actionPerformed(ActionEvent e) {
        		int rwselect = tableStock.getSelectedRow();
        		
        		if(rwselect >= 0 && tools.Utils.noempryString(txtQuantity.getText(), 1)){
        			double cantidad = Double.valueOf(txtQuantity.getText());
        			double cantLimite = Double.valueOf(tableStock.getValueAt(rwselect,2).toString());
        			String idProd = tableStock.getValueAt(rwselect, 0).toString();
        			
        			// if product is insert prev 
        			if(diccionarioFactura.get(idProd) != null ) {
        				if((cantidad + diccionarioFactura.get(idProd)) <= cantLimite  ) {
        					
        					modeltb.addRow(new Object[] {tableStock.getValueAt(rwselect,0).toString(),tableStock.getValueAt(rwselect,1).toString(), txtQuantity.getText(), 
    								(Double.valueOf(tableStock.getValueAt(rwselect, 3).toString())
    										*(Double.valueOf(txtQuantity.getText()))) });
        					
            				diccionarioFactura.put(idProd, (cantidad + diccionarioFactura.get(idProd)));
        				}else {
        					JOptionPane.showMessageDialog(null, 
        							"No hay tanto de ese producto \n intenta agregar " + (cantidad + diccionarioFactura.get(idProd)) + 
        							", pero solo hay "+ cantLimite ,"Error", JOptionPane.ERROR_MESSAGE);
        				}
        			}else {
        			// is new prod on order
        				diccionarioFactura.put(idProd, cantidad);
        				
        				modeltb.addRow(new Object[] {tableStock.getValueAt(rwselect,0).toString(),tableStock.getValueAt(rwselect,1).toString(), txtQuantity.getText(), 
								(Double.valueOf(tableStock.getValueAt(rwselect, 3).toString())
										*(Double.valueOf(txtQuantity.getText()))) });
    					
        			}
        			
        		}else {
        			JOptionPane.showMessageDialog(null, "Seleccione un producto para agregar e ingrese la cantidad");
        		}
        		
        		
        		tableOrder.setModel(modeltb);
        		txtQuantity.setText("");
        		double totalAmount = 0; 
        		for(int i = 0; i< tableOrder.getRowCount() ; i++) {
        			totalAmount += Double.valueOf(tableOrder.getValueAt(i, 3).toString());
        		}
        		
        		labelTotalAmount.setText(""+totalAmount);
        		
        		
        	}
        });
        panelTitleClient = new javax.swing.JPanel();
        labelDataClient = new javax.swing.JLabel();
        panelDataClient = new javax.swing.JPanel();
        panelRight = new javax.swing.JPanel();
        scrollPaneOrder = new javax.swing.JScrollPane();
        tableOrder = new javax.swing.JTable();
        tableStock = new javax.swing.JTable();
        panelTotalLabels = new javax.swing.JPanel();
        labelTotalTitle = new javax.swing.JLabel();
        labelTotalAmount = new javax.swing.JLabel();
        btnRegisterSale = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setMaximumSize(new java.awt.Dimension(1200, 400));
        setMinimumSize(new java.awt.Dimension(2, 4));
        setPreferredSize(new Dimension(727, 375));
        setLayout(new java.awt.GridLayout(1, 0));

        panelLeft.setLayout(new java.awt.GridLayout(1, 0));
        
        

        this.getData();
       
        
        
        scrollPaneStock.setViewportView(tableStock);
        if (tableStock.getColumnModel().getColumnCount() > 0) {
            tableStock.getColumnModel().getColumn(0).setResizable(false);
            tableStock.getColumnModel().getColumn(1).setResizable(false);
            tableStock.getColumnModel().getColumn(2).setResizable(false);
        }

        panelLeft.add(scrollPaneStock);

        add(panelLeft);

        panelCenter.setLayout(new javax.swing.BoxLayout(panelCenter, javax.swing.BoxLayout.Y_AXIS));

        panelTitleSales.setLayout(new java.awt.GridLayout(1, 0));

        labelSale.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        labelSale.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelSale.setText("VENDER");
        panelTitleSales.add(labelSale);

        panelCenter.add(panelTitleSales);

        labelQuantity.setText("Cantidad:");

        btnAddSelectedProduct.setText("Agregar producto seleccionado");
        
        JButton btnRemoveOrder = new JButton();
        btnRemoveOrder.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent arg0) {
        		int rwS = tableOrder.getSelectedRow();
        		if (rwS >= 0) {
        			diccionarioFactura.remove(tableOrder.getValueAt(rwS,0).toString());
        			modeltb.removeRow(rwS);
        			tableOrder.setModel(modeltb);

        		}else {
        			JOptionPane.showMessageDialog(null, "Debe seleccionar un registro para remover","Alerta",JOptionPane.WARNING_MESSAGE);
        		}
        	}
        });
        btnRemoveOrder.setText("Remover producto de la compra ");

        javax.swing.GroupLayout panelAddProductsLayout = new javax.swing.GroupLayout(panelAddProducts);
        panelAddProductsLayout.setHorizontalGroup(
        	panelAddProductsLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(panelAddProductsLayout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(panelAddProductsLayout.createParallelGroup(Alignment.LEADING)
        				.addGroup(panelAddProductsLayout.createSequentialGroup()
        					.addComponent(labelQuantity, GroupLayout.PREFERRED_SIZE, 60, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(txtQuantity, 147, 147, 147))
        				.addComponent(btnAddSelectedProduct, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(btnRemoveOrder, GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE))
        			.addGap(10))
        );
        panelAddProductsLayout.setVerticalGroup(
        	panelAddProductsLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(panelAddProductsLayout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(panelAddProductsLayout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(labelQuantity, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
        				.addComponent(txtQuantity, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addComponent(btnAddSelectedProduct, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(btnRemoveOrder, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
        			.addGap(0, 0, Short.MAX_VALUE))
        );
        panelAddProducts.setLayout(panelAddProductsLayout);

        panelCenter.add(panelAddProducts);

        panelTitleClient.setLayout(new java.awt.GridLayout(1, 0));

        labelDataClient.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        labelDataClient.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelDataClient.setText("Datos del cliente:");
        panelTitleClient.add(labelDataClient);

        panelCenter.add(panelTitleClient);
        
        System.out.println("create");
        
        JLabel lblNewLabel = new JLabel("Seleccione un cliente:");
        
        JLabel lblNewLabel_1 = new JLabel("Registrar cliente:");
        
        JButton btnAddClient = new JButton("Registrar");
        btnAddClient.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		showNewClient();
        	}
        });
        
        comboBoxClientsRegistered = new JComboBox<String>();
//        this.updateComboBox();
        javax.swing.GroupLayout panelDataClientLayout = new javax.swing.GroupLayout(panelDataClient);
        panelDataClientLayout.setHorizontalGroup(
        	panelDataClientLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(panelDataClientLayout.createSequentialGroup()
        			.addContainerGap()
        			.addGroup(panelDataClientLayout.createParallelGroup(Alignment.LEADING)
        				.addComponent(comboBoxClientsRegistered, 0, 221, Short.MAX_VALUE)
        				.addComponent(lblNewLabel)
        				.addGroup(panelDataClientLayout.createSequentialGroup()
        					.addComponent(lblNewLabel_1)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(btnAddClient, GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)))
        			.addContainerGap())
        );
        panelDataClientLayout.setVerticalGroup(
        	panelDataClientLayout.createParallelGroup(Alignment.LEADING)
        		.addGroup(panelDataClientLayout.createSequentialGroup()
        			.addGap(29)
        			.addComponent(lblNewLabel)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(comboBoxClientsRegistered, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addGap(18)
        			.addGroup(panelDataClientLayout.createParallelGroup(Alignment.LEADING, false)
        				.addComponent(lblNewLabel_1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(btnAddClient, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        			.addContainerGap(94, Short.MAX_VALUE))
        );
        panelDataClient.setLayout(panelDataClientLayout);

        panelCenter.add(panelDataClient);

        add(panelCenter);

        panelRight.setLayout(new javax.swing.BoxLayout(panelRight, javax.swing.BoxLayout.Y_AXIS));

        tableOrder.setModel(new DefaultTableModel(
        	new Object[][] {
        		{null, null, null, null}
        		
        	},
        	new String[] {
        		"id", "Nombre", "Cantidad", "Precio"
        	}
        ));
        scrollPaneOrder.setViewportView(tableOrder);
        if (tableOrder.getColumnModel().getColumnCount() > 0) {
            tableOrder.getColumnModel().getColumn(0).setResizable(false);
            tableOrder.getColumnModel().getColumn(1).setResizable(false);
            tableOrder.getColumnModel().getColumn(2).setResizable(false);
        }

        panelRight.add(scrollPaneOrder);

        panelTotalLabels.setLayout(new java.awt.GridLayout(1, 0));

        labelTotalTitle.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelTotalTitle.setText("Total:");
        panelTotalLabels.add(labelTotalTitle);

        labelTotalAmount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelTotalAmount.setText("0.0");
        panelTotalLabels.add(labelTotalAmount);

        panelRight.add(panelTotalLabels);

        btnRegisterSale.setText("Registrar Venta");
        btnRegisterSale.setMaximumSize(new java.awt.Dimension(362, 32));
        btnRegisterSale.setMinimumSize(new java.awt.Dimension(362, 32));
        btnRegisterSale.setPreferredSize(new java.awt.Dimension(362, 32));
        btnRegisterSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterSaleActionPerformed(evt);
            }
        });
        
        btnAddCredit = new JButton();
        btnAddCredit.setText("Registrar Credito");
        btnAddCredit.setPreferredSize(new Dimension(362, 32));
        btnAddCredit.setMinimumSize(new Dimension(362, 32));
        btnAddCredit.setMaximumSize(new Dimension(362, 32));
        panelRight.add(btnAddCredit);
        panelRight.add(btnRegisterSale);

        add(panelRight);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegisterSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterSaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRegisterSaleActionPerformed
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddSelectedProduct;
    private javax.swing.JButton btnRegisterSale;
    private javax.swing.JLabel labelDataClient;
    private javax.swing.JLabel labelQuantity;
    private javax.swing.JLabel labelSale;
    private javax.swing.JLabel labelTotalAmount;
    private javax.swing.JLabel labelTotalTitle;
    private javax.swing.JPanel panelAddProducts;
    private javax.swing.JPanel panelCenter;
    private javax.swing.JPanel panelDataClient;
    private javax.swing.JPanel panelLeft;
    private javax.swing.JPanel panelRight;
    private javax.swing.JPanel panelTitleClient;
    private javax.swing.JPanel panelTitleSales;
    private javax.swing.JPanel panelTotalLabels;
    private javax.swing.JScrollPane scrollPaneOrder;
    private javax.swing.JScrollPane scrollPaneStock;
    private javax.swing.JTable tableOrder;
    public javax.swing.JTable tableStock;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
    ArrayList<Client> clients = null;
    JComboBox<String> comboBoxClientsRegistered =null;
    java.util.Hashtable<String, Double> diccionarioFactura = new java.util.Hashtable<String, Double>();
    private JButton btnAddCredit;
    
    /////////////////////////////////BACKEND /////////////////////////////////
    /***
	 * Update the category table 
	 */
	public void getData() {
//		ArrayList<objs.Product> products = dao.ProductDAO.read();
//		ArrayList<objs.Product> products = dao.ProductDAO.read("select ");
//		select product.id, product.name, product.stock, product.description, product.cpp, product.price, product.category,
//		category.name from product join category on product.category = category.id
		System.out.println("aaaaaaaaaa getdata ");
		// lod table model
		WDefaultTableModel modeltb = new WDefaultTableModel(
				new String [] {"id","Nombre","cantidad", "Precio"});
		Connection conn = null;
		try {
			//get Connection
			conn = AdminDAO.getConnection();
			//put sql
			ResultSet rs =null;
			rs = conn.createStatement().executeQuery(
					"select id, name, stock, price from product"); 
			
			// load products
			while (rs.next()) {
				modeltb.addRow( new Object[] {rs.getInt(1),rs.getString(2), rs.getDouble(3), rs.getDouble(4)});
			}
			AdminDAO.closeConnection();
		} catch (Exception e) {
			System.out.println("error to select into product " + e);
			e.printStackTrace();
		}
		
		tableStock.setModel(modeltb);

	}
	
	public void updateComboBox(){
		comboBoxClientsRegistered.removeAllItems();
        comboBoxClientsRegistered.addItem("---");
        comboBoxClientsRegistered.repaint();
    	clients = ClientDAO.read();
        AdminDAO.closeConnection();
        for (int i = 0; i < clients.size(); i++) {
        	System.out.println("entra al for " + i + clients.get(i).getCc());
        	comboBoxClientsRegistered.addItem(clients.get(i).getCc() + " - "+ clients.get(i).getName());
		}
        
    }
	
	private void showNewClient() {
		new AddClient().combx = this;
	}
}
